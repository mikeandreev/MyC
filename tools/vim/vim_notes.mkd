
TODO
====
* save current session periodically
* host specific vimrc sections/subfiles
* https://github.com/tpope/vim-sensible/blob/master/plugin/sensible.vim
* https://github.com/xolox/vim-notes
* ? other fuzzy searchers. FuzzyFinder, Command-T
* <http://www.bestofvim.com/plugin/pathogen/>
* <http://www.bestofvim.com/plugin/match-it/>
* vim undo model 
* <http://vim.wikia.com/wiki/VimTip227> Power of g

* open in existing vim in new tab : --remote-tab-silent
* ? <http://vim.sourceforge.net/scripts/script_search_results.php?order_by=rating>

* <http://www.bestofvim.com/>
* <http://el-tramo.be/blog/my-favorite-vim-plugins/>
* <http://dougblack.io/words/a-good-vimrc.html>

* <https://github.com/mileszs/ack.vim>

* https://www.youtube.com/watch?v=knSFZCKMy20
	https://github.com/wincent/Command-T =~ Ctrl-P
	https://github.com/sjbach/lusty  =~ Ctrl-P


* ? layout and shortcuts issue
	* http://habrahabr.ru/post/175709/
	* http://habrahabr.ru/post/98393/

* ? test .vimrc in terminal

* ? basic vim scripting
    * ? <http://www.ibm.com/developerworks/library/l-vim-script-1/>
* ? swp files

* markers

* :help key-mapping

* Search in Multiple Files
  pdf.p.72

        :set spell
        :set spelllang=en,da,de,it

        :set guitabtooltip=%!bufname($)

  pdf.p.45

  FoldSpellBalloon()
  pdf.p.53

* ? vim as python IDE/interactive env
* ? vim for LaTeX
* ? vim for perl

* . copy/pate registets
* .+ git project for dot files and working notes
* -+ copying current file name to clipboard
* -+ save session
    * - paths in store/load functions
    * ? load files on start without questions
* +. code / xml folding

* + ack
* + pathogen
* +tags
	* + <http://majutsushi.github.io/tagbar/>
    * <http://ctags.sourceforge.net/>
	* - <http://vim-taglist.sourceforge.net/>
	* ? <https://github.com/tomtom/ttags_vim>

* + turn off Russian menu localisation on Duo
	* .+ http://habrahabr.ru/post/183222/
* + current line 
* + move buffer in windows and not moving the cursor
* + <http://vim.wikia.com/wiki/Easier_buffer_switching>
* + VisVim
* + Ctrl-Y
* + status line
* + Ctrl+C / +V
* + Ctrl+S
* + default encoding
* + default: open files for RW
* + edit with existing vim - default in context menu

tips
====
* named registers

        "ay8j   - copy 8 lines below the cursor to name register 'a'
        "ap     - paste content of register 'a'

* moving window in buffer

        zt / z<Enter> - move current line to the top of the screen
        zz / z. - move current line to the middle of the screen
        zb / z- - move current line to the bottom of the screen

        Ctrl-e Moves screen up one line
        Ctrl-y Moves screen down one line

        Ctrl-u Moves screen up ½ page
        Ctrl-d Moves screen down ½ page

        Ctrl-b Moves screen up one page
        Ctrl-f Moves screen down one page

        Ctrl-D  move half-page down
        Ctrl-U  move half-page up
        Ctrl-B  page up
        Ctrl-F  page down
        Ctrl-o  jump to last cursor position
        Ctrl-i  jump to next cursor position

* moves in document / srcreen

        0   move to beginning of line
        $   move to end of line
        ^   move to first non-blank char of the line
        _   same as above, but can take a count to go to a different line
        g_  move to last non-blank char of the line (can also take a count as above)

        gg  move to first line
        G   move to last line
        nG  move to n'th line of file (where n is a number)

        H   move to top of screen
        M   move to middle of screen
        L   move to bottom of screen

        n   next matching search pattern
        N   previous matching search pattern
        *   next word under cursor
        #   previous word under cursor
        g*  next matching search pattern under cursor
        g#  previous matching search pattern under cursor

        %   jump to matching bracket { } [ ] ( )

* Ctrl+O takes me to the previous location. Don't know about location before the search.
 Also, `. will take you to the last change you made.


* undo: u

        redo: <Ctrl-R>

* ? folding
<http://vim.wikia.com/wiki/Folding>

        set foldmethod=syntax
        zc / zo  / za // zC / zC / zA
        zr / zm // zR / zM

* open file
        gf 	open in the same window ("goto file")
        <c-w>f 	open in a new window (Ctrl-w f)
        <c-w>gf 	open in a new tab (Ctrl-w gf)

* indent

        >> "one line
        5>> "5 lines
        Ctrl+Q jjj > "makr a block of 3 line below and add indent

* set cursorcolumn
* tabs

        :tabnew / :tabn / :tabp
        next tab: gt
        prev tab: gT
        numbered tab: nnn g t

* find and delete lines ``:g/\ctpleft/d``

        :[range]g/pattern/cmd
        :g!/pattern/d
        :v/pattern/d

* ":edit" / ":edit!" command, without specifying a file name, to reload the current file.

* navigation between tabs

        ctrl+w h/j/k/l

* check current parameter value

        set guifont?

* check compile-time feature

        echo has('python')

* process part of the current buffer with external program, and replace the text with the programm output

        :. ! perl e:\tmp\utestParser1.pl E:\path\to\result.2014-09-15_12-50.txt

* case insensive search

        /\ccopyright

Also, \c can appear anywhere in the pattern, so if you type a pattern and then decide you wanted a case-insensitive search, just add a \c at the end.

* CtrlP

        :CtrlPClearAllCaches

* BufExplorer Plugin for Vim
With bufexplorer, you can quickly and easily switch between buffers by using the one of the default public interfaces:

        '\be' (normal open) or 
        '\bs' (force horizontal split open) or 
        '\bv' (force vertical split open)

* close buffer without closing current split
leave buffer and close it

        bp|bd #
        :Bclose -- with <http://vim.wikia.com/wiki/Deleting_a_buffer_without_closing_the_window>

Details: bp("buffer previous") moves us to a different buffer in the current window (bn would work, too), then bd # ("buffer delete" "alternate file") deletes the buffer we just moved away from. See: help bp, help bd, help alternate-file.

* set syntax=xml

* open in existing vim in new tab : --remote-tab-silent

Plugins to install
==================
* Windows (both Native and Cygwin) will use _gvimrc, .gvimrc, _vimrc and .vimrc in that order of priority. The gvim files will be checked with the gvim process, while the console vim will only check the vim files.

* %HOME%/vimfiles/ on Windows \ ~/.vim/ on Unix

* <https://github.com/tmhedberg/matchit>

        git clone https://github.com/tmhedberg/matchit.git

* <https://github.com/ciaranm/detectindent/blob/master/doc/detectindent.txt>

        git clone https://github.com/ciaranm/detectindent.git

* vim-session <https://github.com/xolox/vim-session>

        git clone https://github.com/xolox/vim-misc.git
        git clone https://github.com/xolox/vim-session.git

* EasyMotion <https://github.com/Lokaltog/vim-easymotion>

        git clone https://github.com/Lokaltog/vim-easymotion.git

* <https://github.com/mileszs/ack.vim>

        git clone https://github.com/mileszs/ack.vim.git

* <https://github.com/jlanzarotta/bufexplorer>

        git clone https://github.com/jlanzarotta/bufexplorer.git

* Ctrl-P <https://github.com/kien/ctrlp.vim>

        git clone https://github.com/kien/ctrlp.vim.git

* <https://github.com/altercation/Vim-colors-solarized>

        git clone https://github.com/altercation/vim-colors-solarized.git

* <http://majutsushi.github.io/tagbar/>

        git clone https://github.com/majutsushi/tagbar.git

* <https://github.com/valloric/MatchTagAlways> Vim plugin for showing matching html tags

        git clone https://github.com/Valloric/MatchTagAlways.git

* pathogen <https://github.com/tpope/vim-pathogen>

        mkdir -p ~/.vim/autoload ~/.vim/bundle
        curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
        cd ~/.vim/bundle
        git clone _url_




